{"version":3,"file":"static/js/414.8cb87bca.chunk.js","mappings":"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","sources":["ApiOP/useFetch.js","CommonOP/OPValidations.js","ComponentOP/OPCheckBox.js","ComponentOP/OPLink.js","ComponentOP/OPTextBox.js","PagesOP/OPHotelLogin.js"],"sourcesContent":["import { useState } from \"react\";\r\nconst useFetch = () => {\r\n  const [responseData, setResponseData] = useState([]);\r\n  const [isLoadingApi, setisLoading] = useState(false);\r\n  const [fetchError, setFetchError] = useState(null);\r\n  const [apiKey, setApiKey] = useState(null);\r\n  const baseURI = \"https://orderpls.onrender.com\";\r\n\r\n  const serverRequest = (serverRequestParam) => {\r\n    const fetchURL = baseURI + serverRequestParam.apiUrl;\r\n    setApiKey(serverRequestParam.apikey);\r\n    setisLoading(false);\r\n    fetch(fetchURL, serverRequestParam)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((respdata) => {\r\n        setResponseData(respdata);\r\n        setisLoading(true);\r\n      })\r\n      .catch((err) => {\r\n        setisLoading(false);\r\n        setFetchError(err.message);\r\n      });\r\n  };\r\n\r\n  return { responseData, isLoadingApi, apiKey, fetchError, serverRequest };\r\n};\r\n\r\n\r\n\r\n\r\nexport default useFetch;\r\n","import React from 'react'\r\n\r\nexport const OPValidations = () => {\r\n  return function validateControls(ctl_attribute) {\r\n\r\n    if (ctl_attribute.validate.mandatory === true) {\r\n      let brewErr = checkMandatory(ctl_attribute);\r\n      if (brewErr.founderror === true) {\r\n        return brewErr;\r\n      }\r\n    }\r\n\r\n    return checkValidateDataType(ctl_attribute);\r\n  };\r\n\r\n  function checkValidateDataType(ctl_attribute) {\r\n    let brewError = {};\r\n    if (ctl_attribute.inputvalue != \"\") {\r\n      switch (ctl_attribute.validate.datatype) {\r\n        case \"email\":\r\n          let retvalidemail = validateEmail(ctl_attribute.inputvalue);\r\n          if (retvalidemail === null) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"No Valid Email address entered\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n        case \"phoneno\":\r\n          let retvalidphone = validatePhoneNo(ctl_attribute.inputvalue);\r\n          let retvalidphonecode = validatePhoneCode(ctl_attribute.inputkey);\r\n          if (retvalidphone === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Invalid Phone no entered\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          } else if (retvalidphonecode === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Phone Code doesn't been empty\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n        case \"numeric\":\r\n          let retvalidnumeric = validateIsNumber(ctl_attribute.inputvalue);\r\n          if (retvalidnumeric === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Accepts Only Numeric Field\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n        case \"loginid\":\r\n          let retvalidLoginid = validateIsLoginID(ctl_attribute.inputvalue);\r\n          if (retvalidLoginid === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Invalid Field entered\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n        case \"aadharno\":\r\n          let retvalidAadhar = validateAadharNo(ctl_attribute.inputvalue);\r\n          if (retvalidAadhar === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Invalid Aadhar no\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n        case \"alpha\":\r\n          let retvalidAlpha = validateAlpha(ctl_attribute.inputvalue);\r\n          if (retvalidAlpha === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Invalid field Only Alphabet\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n        case \"alphanumeric\":\r\n          let retvalidAlphaNumeric = validateAlphaNumeric(ctl_attribute.inputvalue);\r\n          if (retvalidAlphaNumeric === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Invalid field Only AlphaNumeric\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n        case \"dropdown\":\r\n          let retvalidDropDown = validateDropDown(ctl_attribute.inputvalue);\r\n          if (retvalidDropDown === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Invalid Selection\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n        case \"username\":\r\n          let retvalidUserName = validateUserName(ctl_attribute.inputvalue);\r\n          if (retvalidUserName === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Invalid Syntax only (@ and _ )\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n\r\n        case \"hotelcode\":\r\n          let retvalidGOTID = validateHotelCode(ctl_attribute.inputvalue);\r\n          if (retvalidGOTID === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Invalid offer ID\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n        case \"searchBox\":\r\n          let retvalidssearchbox = validateSearchBox(ctl_attribute);\r\n          if (retvalidssearchbox === false) {\r\n            brewError.controlid = ctl_attribute.csstheme.id;\r\n            brewError.errmsg = \"Not in Menu\";\r\n            brewError.founderror = true;\r\n            brewError.arrayindex = ctl_attribute.arrayindex;\r\n          }\r\n          break;\r\n        default:\r\n          brewError.controlid = ctl_attribute.csstheme.id;\r\n          brewError.errmsg = \"\";\r\n          brewError.founderror = false;\r\n          brewError.arrayindex = ctl_attribute.arrayindex;\r\n          break;\r\n      }\r\n    }\r\n    return brewError;\r\n  }\r\n\r\n  function validatePhoneNo(phoneno) {\r\n    let a = /^\\d{10}$/;\r\n    return a.test(phoneno);\r\n  }\r\n  function validateHotelCode(hotelcode) {\r\n    let a = /^\\d{9}$/;\r\n    return a.test(hotelcode);\r\n  }\r\n\r\n  function validateUserName(username) {\r\n    let s = /^[a-zA-Z0-9\\_\\@]+$/;\r\n    return s.test(username)\r\n  }\r\n\r\n  function validateAadharNo(aadharno) {\r\n    let s = /^\\d{12}$/;\r\n    return s.test(aadharno);\r\n  }\r\n  function validateAlpha(alpha) {\r\n    let s = /^[A-Za-z\\ ]+$/;\r\n    return s.test(alpha);\r\n  }\r\n  function validateAlphaNumeric(alphanumeric) {\r\n    let s = /^[0-9a-zA-Z\\ ]+$/;\r\n    return s.test(alphanumeric);\r\n  }\r\n  function validatePhoneCode(phonecode) {\r\n    let _bool = true;\r\n    if (phonecode === \"\") {\r\n      _bool = false;\r\n    }\r\n    return _bool;\r\n  }\r\n  function validateDropDown(dropdown) {\r\n    let _bool = true;\r\n    if (dropdown === \"\") {\r\n      _bool = false;\r\n    }\r\n    return _bool;\r\n  }\r\n  function validateEmail(email) {\r\n    return email\r\n      .toLowerCase()\r\n      .match(\r\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n      );\r\n  }\r\n  function isOnlyNumbers(input) {\r\n    const numberRegex = /^\\d+$/;\r\n    return numberRegex.test(input);\r\n  }\r\n  function validateIsLoginID(loginid) {\r\n    if (isOnlyNumbers(loginid)) {\r\n      return validatePhoneNo(loginid);\r\n    }else if(validateEmail(loginid)){\r\n      return true;\r\n    }else if(validateUserName(loginid)){\r\n      return true;\r\n    }else{\r\n      return false;\r\n    }\r\n\r\n  }\r\n  function validateSearchBox(attribute) {\r\n    let _filterarr = attribute.dropdownlist.filter(item => item.m_value === attribute.inputvalue);\r\n    let _bool = true\r\n    if (_filterarr.length === 0) {\r\n      _bool = false\r\n    }\r\n    return _bool;\r\n  }\r\n  function validateIsNumber(ivalue) {\r\n    return !isNaN(parseFloat(ivalue)) && isFinite(ivalue);\r\n  }\r\n  function checkMandatory(ctl_attribute) {\r\n    let brewError = {};\r\n    if (ctl_attribute.inputvalue === \"\") {\r\n      brewError.controlid = ctl_attribute.csstheme.id;\r\n      brewError.errmsg = \"This field is mandatory\";\r\n      brewError.founderror = true;\r\n      brewError.arrayindex = ctl_attribute.arrayindex;\r\n    } else if (ctl_attribute.inputkey === \"\") {\r\n      brewError.controlid = ctl_attribute.csstheme.id;\r\n      brewError.errmsg = \"Invalid Selection\";\r\n      brewError.founderror = true;\r\n      brewError.arrayindex = ctl_attribute.arrayindex;\r\n    }\r\n    else {\r\n      brewError.controlid = ctl_attribute.csstheme.id;\r\n      brewError.errmsg = \"\";\r\n      brewError.founderror = false;\r\n      brewError.arrayindex = ctl_attribute.arrayindex;\r\n    }\r\n    return brewError;\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport const OPCheckBox = ({ ctl_Attribute, handleCheckBox }) => {\r\n    return (\r\n        <div className='form-check form-check-md d-flex align-items-center'>\r\n            <input\r\n                className={ctl_Attribute.csstheme.classname}\r\n                id={ctl_Attribute.csstheme.id}\r\n                type=\"checkbox\"\r\n                // checked={ctl_Attribute.csstheme.checked}\r\n                onClick={handleCheckBox}\r\n            />\r\n            <label htmlFor={ctl_Attribute.csstheme.id} className='form-check-label'>{ctl_Attribute.csstheme.labletext}</label>\r\n        </div>);\r\n}\r\n\r\n/*\r\nprops data\r\n    {\r\n        arrayIndex: 4,\r\n        csstheme: {\r\n          labletext: \"Show Password\",\r\n          classname: \"form-check-input\",\r\n          id: \"cb_showpassword\",\r\n        },\r\n      },\r\nprops \r\n    <BrewCheckBox\r\n    ctl_Attribute={ctl_attribute.current[4]}\r\n     handleOnClick={handleOnForCheckBox}\r\n     ></BrewCheckBox>\r\n\r\nfunction \r\n    const handleOnForCheckBox = (e) => {\r\n    let ctl_id = e.target.id;\r\n    switch (ctl_id) {\r\n      case \"cb_showpassword\":\r\n        fnCheckBoxForPassword(e, ctl_attribute.current[1]);\r\n        setRenderLoginQuestion(!render_LoginQuestion)\r\n        break;\r\n    }\r\n    }\r\n\r\ncallback function\r\nfunction fnCheckBoxForPassword(event, props) {\r\n    console.log(event.target.checked);\r\n    console.log(props);\r\n    if (event.target.checked == true) {\r\n      props.csstheme.inputType = \"text\"\r\n      return (props.csstheme.inputType)\r\n    } else {\r\n      props.csstheme.inputType = \"password\"\r\n      return (props.csstheme.inputType)\r\n    }\r\n  }\r\n\r\n*/","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const OPLink = ({ ctl_Attribute }) => {\r\n    // const [isLinkDisable, setIsLinkDisable] = useState();\r\n    // useEffect(() => {\r\n    //     setIsLinkDisable(ctl_Attribute.islinkdisable);\r\n    // }, [rerender]);\r\n    return (\r\n        \r\n            <Link\r\n                to={ctl_Attribute.to}\r\n                className={ctl_Attribute.csstheme.classname}\r\n                id={ctl_Attribute.csstheme.id}>\r\n                {ctl_Attribute.csstheme.labletext}\r\n            </Link>\r\n        \r\n    )\r\n}\r\n","import \"../assets/plugins/tabler-icons/tabler-icons.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { OPValidations } from '../CommonOP/OPValidations';\r\nimport { Tooltip } from \"react-tooltip\";\r\n\r\nexport const OPTextBox = ({ ctl_Attribute, rerender }) => {\r\n\r\n    const [l_rerender, l_setRerender] = useState(false)\r\n    const validate = OPValidations();\r\n    useEffect(() => { }, [rerender]);\r\n\r\n    const handleOnFocus = (e) => {\r\n        e.currentTarget.setCustomValidity(\"\")\r\n        ctl_Attribute.tooltip.isvalidation = true;\r\n        l_setRerender(!l_rerender);\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n        ctl_Attribute.error.errorshow = false;\r\n        ctl_Attribute.inputvalue = e.currentTarget.value;\r\n        l_setRerender(!l_rerender);\r\n    };\r\n\r\n    function handleOnBlur(e) {\r\n        ctl_Attribute.inputvalue = e.currentTarget.value;\r\n        ctl_Attribute.tooltip.isvalidation = false;\r\n        let err = validate(ctl_Attribute);\r\n        if (err.founderror == true) {\r\n            ctl_Attribute.error.errormsg = err.errmsg;\r\n            ctl_Attribute.error.errorshow = true;\r\n            e.currentTarget.setCustomValidity(err.errmsg)\r\n        }\r\n        l_setRerender(!l_rerender);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <label htmlFor={ctl_Attribute.csstheme.id} className=\"col-form-label \">{ctl_Attribute.csstheme.labletext}{ctl_Attribute.validate.mandatory ? (<span className=\"text-danger\">&nbsp;*</span>) : null}</label>\r\n            <input\r\n                ref={(el) => {\r\n                    ctl_Attribute.tooltip.isfocus = el\r\n                    ctl_Attribute.tooltip.errorshow = el\r\n                }}\r\n                className={`${ctl_Attribute.csstheme.classname} ${ctl_Attribute.error.errorshow ? \"err-border\" : \"\"}`}\r\n                type=\"text\"\r\n                data-tooltip-content={ctl_Attribute.error.errorshow ? ctl_Attribute.error.errormsg : ctl_Attribute.csstheme.hinttext}\r\n                data-tooltip-id={ctl_Attribute.csstheme.id}\r\n                data-tooltip-place={ctl_Attribute.tooltip.place}\r\n                data-tooltip-class-name={ctl_Attribute.tooltip.classname}\r\n                readOnly={ctl_Attribute.csstheme.readonly}\r\n                id={ctl_Attribute.csstheme.id}\r\n                disabled={ctl_Attribute.csstheme.readonly}\r\n                maxLength={ctl_Attribute.csstheme.length}\r\n                onBlur={handleOnBlur}\r\n                onFocus={handleOnFocus}\r\n                value={ctl_Attribute.inputvalue}\r\n                onChange={handleOnChange}\r\n                autoComplete=\"off\"\r\n            // required={ctl_Attribute.validate.mandatory}\r\n            />\r\n            <Tooltip id={ctl_Attribute.csstheme.id} isOpen={ctl_Attribute.tooltip.isvalidation} />\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { OPButton } from '../ComponentOP/OPButton'\r\nimport { OPLoader } from '../ComponentOP/OPLoader';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { OPTextBox } from '../ComponentOP/OPTextBox';\r\nimport { OPCheckBox } from '../ComponentOP/OPCheckBox';\r\nimport { OPLink } from '../ComponentOP/OPLink';\r\nimport { OPValidations } from '../CommonOP/OPValidations';\r\nimport { setlogininfo } from '../brewStore/AppState';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useFetch from '../ApiOP/useFetch';\r\n\r\n\r\nexport const OPHotelLogin = () => {\r\n    const [startInit, setStartInit] = useState(true);\r\n    const [startRender, setStartRender] = useState(false);\r\n    const [startLoader, setStartLoader] = useState(true);\r\n    const [rerender, setRerender] = useState(false);\r\n\r\n    const ctlAttribute = useRef([]);\r\n\r\n    const navigate = useNavigate();\r\n    const validate = OPValidations();\r\n    const dispatchappStore = useDispatch();\r\n    const getAppStoreData = useSelector((state) => state.appstate.login_info);\r\n    const { responseData, isLoadingApi, apiKey, fetchError, serverRequest } = useFetch();\r\n\r\n    function initControl() {\r\n        dispatchappStore(\r\n            setlogininfo({\r\n                ...getAppStoreData,\r\n                isloggedin: false,\r\n                burnerid: 0,\r\n            })\r\n        );\r\n        let ctl_array = [\r\n\r\n            {\r\n                /*Ctl:Email Address : 0*/\r\n                arrayindex: 0,\r\n                csstheme: {\r\n                    labletext: \"Login ID\",\r\n                    classname: \"form-control\",\r\n                    id: \"txt_loginid\",\r\n                    inputtype: \"text\",\r\n                    length: 50,\r\n                    readonly: false,\r\n                    hinttext: \"Enter your Registered Email, Phone, or Username\",\r\n                },\r\n                inputvalue: \"\",\r\n                tooltip: {\r\n                    place: \"bottom\",\r\n                    classname: \"tooltip-react\",\r\n                    isfocus: \"\",\r\n                    isvalidation: false,\r\n                },\r\n                validate: {\r\n                    mandatory: true,\r\n                    datatype: \"loginid\",\r\n                },\r\n                error: {\r\n                    errorshow: false,\r\n                    errormsg: \"The field is mandatory\",\r\n                },\r\n            },\r\n            {\r\n                /*Ctl:password : 1*/\r\n                arrayindex: 1,\r\n                csstheme: {\r\n                    labletext: \"Password\",\r\n                    classname: \"form-control\",\r\n                    id: \"txt_password\",\r\n                    inputtype: \"text\",\r\n                    length: 50,\r\n                    readonly: false,\r\n                    hinttext: \"Enter your Password\",\r\n                },\r\n                inputvalue: \"\",\r\n                tooltip: {\r\n                    place: \"bottom\",\r\n                    classname: \"tooltip-react\",\r\n                    isfocus: \"\",\r\n                    isvalidation: false,\r\n                },\r\n                validate: {\r\n                    mandatory: true,\r\n                    datatype: \"alphanumeric\",\r\n                },\r\n                error: {\r\n                    errorshow: false,\r\n                    errormsg: \"The field is mandatory\",\r\n                },\r\n            },\r\n            {\r\n                /*Ctl:Remember Me : 2*/\r\n                arrayindex: 2,\r\n                csstheme: {\r\n                    labletext: \"Remember Me\",\r\n                    classname: \"form-check-input\",\r\n                    id: \"cb_rememberme\",\r\n                    checked: true,\r\n                },\r\n            },\r\n            {\r\n                /*Ctl:Forgot Password : 3*/\r\n                arrayindex: 3,\r\n                csstheme: {\r\n                    labletext: \"Forgot Password?\",\r\n                    classname: \"text-primary fw-medium link-hover\",\r\n                    id: \"cb_rememberme\",\r\n                },\r\n                to: \"Forgot-password\"\r\n            },\r\n            {\r\n                /*Ctl:Login : 4*/\r\n                arrayindex: 4,\r\n                csstheme: {\r\n                    labletext: \"Login\",\r\n                    classname: \"btn btn-primary pad-btn\",\r\n                    id: \"btn_login\",\r\n                },\r\n            },\r\n            {\r\n                /*Link:Sign up : 5*/\r\n                arrayindex: 5,\r\n                csstheme: {\r\n                    labletext: \" Sign up.\",\r\n                    classname: \"text-purple link-hover\",\r\n                    id: \"cb_signup\",\r\n                },\r\n                to: \"/Restuarant/Restuarant-signup\"\r\n            },\r\n        ]\r\n        ctlAttribute.current = ctl_array;\r\n        setStartInit(false);\r\n        setStartRender(true);\r\n        setStartLoader(false);\r\n    }\r\n\r\n    function handleCheckBox(e) {\r\n\r\n    }\r\n    function fnLogin() {\r\n        let canFormSubmit = true;\r\n        let err = [];\r\n        let l_validate = [];\r\n        err.push(validate(ctlAttribute.current[1]))\r\n        err.push(validate(ctlAttribute.current[0]))\r\n        console.log(err);\r\n\r\n        for (let i = 0; i < err.length; i++) {\r\n            if (err[i].founderror === true) {\r\n                canFormSubmit = false;\r\n                ctlAttribute.current[err[i].arrayindex].error.errorshow = true;\r\n                l_validate.push(err[i])\r\n            }\r\n        }\r\n        if (canFormSubmit === false) {\r\n            ctlAttribute.current[l_validate[l_validate.length - 1].arrayindex].tooltip.isvalidation = true;\r\n            ctlAttribute.current[l_validate[l_validate.length - 1].arrayindex].tooltip.isfocus.focus();\r\n            setRerender(!rerender);\r\n        }\r\n        else {\r\n            setStartLoader(true);\r\n            fnGetAuthlogin();\r\n        }\r\n    }\r\n\r\n    function fnGetAuthlogin() {\r\n        let _getLoginAuth = {\r\n            loginID: ctlAttribute.current[0].inputvalue,\r\n            password: ctlAttribute.current[1].inputvalue\r\n        }\r\n\r\n        let serverRequestParam = {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(_getLoginAuth),\r\n            apiUrl: \"/api/v1/loginrestauant\",\r\n            apikey: \"LOGIN\"\r\n        };\r\n        serverRequest(serverRequestParam);\r\n    }\r\n    function handleButtonClick(e) {\r\n        const btn_id = e.target.id;\r\n        switch (btn_id) {\r\n            case \"btn_login\":\r\n                fnLogin();\r\n                break;\r\n\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (startInit === true) {\r\n            initControl();\r\n        } else {\r\n            if (isLoadingApi) {\r\n                switch (apiKey) {\r\n                    case \"LOGIN\":\r\n                        fnLoginResult();\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [startInit, isLoadingApi]);\r\n\r\n    function fnLoginResult() {\r\n        console.log(responseData)\r\n        if (responseData.isAuth) {\r\n            dispatchappStore(\r\n                setlogininfo({\r\n                    ...getAppStoreData,\r\n                    isloggedin: responseData.isAuth,\r\n                    burnerid: responseData.employeeID,\r\n                    mailID: responseData.mailID,\r\n                    phone: responseData.phone,\r\n                    userName: responseData.userName,\r\n                    room: responseData.room,\r\n                    companyName: responseData.companyName,\r\n                    usertype: \"restauant\",\r\n                }),\r\n            );\r\n            if (getAppStoreData.lastseen !== null) {\r\n                let arr = getAppStoreData.lastseen.split(\"/\").find(item => item === \"restauant\");\r\n                console.log(arr)\r\n                if (arr !== undefined) {\r\n                    navigate(getAppStoreData.lastseen);\r\n                } else {\r\n                    navigate(`/${responseData.companyName}/restauant/my-profile`);\r\n                }\r\n            } else {\r\n                navigate(`/${responseData.companyName}/restauant/my-profile`);\r\n            }\r\n        } else {\r\n            if (responseData.message === \"Wrong Password\") {\r\n                ctlAttribute.current[1].error.errorshow = true;\r\n                ctlAttribute.current[1].error.errormsg = responseData.message;\r\n                ctlAttribute.current[1].tooltip.isvalidation = true;\r\n                ctlAttribute.current[1].tooltip.isfocus.focus();\r\n            } else if (responseData.message === \"LoginID didn't matched\") {\r\n                ctlAttribute.current[0].error.errorshow = true;\r\n                ctlAttribute.current[1].error.errorshow = true;\r\n                ctlAttribute.current[0].error.errormsg = responseData.message;\r\n                ctlAttribute.current[0].tooltip.isvalidation = true;\r\n                ctlAttribute.current[0].tooltip.isfocus.focus();\r\n            }\r\n        }\r\n        setStartLoader(false);\r\n    }\r\n    return (<>\r\n        {startLoader && (<OPLoader />)}\r\n        {startRender && (\r\n            <div className=\"account-page\">\r\n                <div className=\"main-wrapper\">\r\n                    <div className=\"account-content\">\r\n                        <div className='mt-5em'></div>\r\n                        <div className=\"d-flex flex-wrap w-100 vh-100 justify-content-center\">\r\n                            <div className='d-flex justify-content-center flex-wrap p-4 w-50 bg-backdrop'>\r\n                                <div className='flex-fill'>\r\n                                    <div className='mx-auto'>\r\n                                        <div className='text-center mb-4'>\r\n                                            <img\r\n                                                src={require(\"../assets/img/book-my-table.jpg\")}\r\n                                                alt=\"Order pls\"\r\n                                            ></img>\r\n                                        </div>\r\n                                        <div className='mb-4'>\r\n                                            <h4>Restaurant</h4>\r\n                                            <p>This page is used to Login the Registered Restaurant Account</p>\r\n                                        </div>\r\n                                        <div className='mb-3'>\r\n                                            <OPTextBox\r\n                                                ctl_Attribute={ctlAttribute.current[0]}\r\n                                                rerender={rerender}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='mb-3'>\r\n                                            <OPTextBox\r\n                                                ctl_Attribute={ctlAttribute.current[1]}\r\n                                                rerender={rerender}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='d-flex align-items-center justify-content-between mb-3'>\r\n                                            <OPCheckBox\r\n                                                ctl_Attribute={ctlAttribute.current[2]}\r\n                                                handleCheckBox={handleCheckBox}\r\n                                            />\r\n                                            <OPLink\r\n                                                ctl_Attribute={ctlAttribute.current[3]}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='d-grid mx-auto mb-3'>\r\n                                            <OPButton\r\n                                                ctl_Attribute={ctlAttribute.current[4]}\r\n                                                handleButtonClick={handleButtonClick}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='mb-3'>\r\n                                            <h6>Not a member yet?\r\n                                                <OPLink\r\n                                                    ctl_Attribute={ctlAttribute.current[5]}\r\n                                                />\r\n                                            </h6>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            </div >\r\n        )}\r\n    </>)\r\n}\r\n"],"names":["useFetch","responseData","setResponseData","useState","isLoadingApi","setisLoading","fetchError","setFetchError","apiKey","setApiKey","serverRequest","serverRequestParam","fetchURL","apiUrl","apikey","fetch","then","response","json","respdata","catch","err","message","OPValidations","ctl_attribute","validate","mandatory","brewErr","brewError","inputvalue","controlid","csstheme","id","errmsg","founderror","arrayindex","inputkey","checkMandatory","datatype","validateEmail","retvalidphone","validatePhoneNo","retvalidphonecode","phonecode","_bool","validatePhoneCode","ivalue","isNaN","parseFloat","isFinite","loginid","input","test","validateUserName","validateIsLoginID","aadharno","alpha","alphanumeric","dropdown","validateDropDown","hotelcode","attribute","_filterarr","dropdownlist","filter","item","m_value","length","validateSearchBox","checkValidateDataType","phoneno","username","email","toLowerCase","match","OPCheckBox","_ref","ctl_Attribute","handleCheckBox","_jsxs","className","children","_jsx","classname","type","onClick","htmlFor","labletext","OPLink","Link","to","OPTextBox","rerender","l_rerender","l_setRerender","useEffect","_Fragment","ref","el","tooltip","isfocus","errorshow","error","errormsg","hinttext","place","readOnly","readonly","disabled","maxLength","onBlur","e","currentTarget","value","isvalidation","setCustomValidity","onFocus","onChange","autoComplete","Tooltip","isOpen","OPHotelLogin","startInit","setStartInit","startRender","setStartRender","startLoader","setStartLoader","setRerender","ctlAttribute","useRef","navigate","useNavigate","dispatchappStore","useDispatch","getAppStoreData","useSelector","state","appstate","login_info","fnLogin","canFormSubmit","l_validate","push","current","console","log","i","focus","_getLoginAuth","loginID","password","method","headers","body","JSON","stringify","fnGetAuthlogin","setlogininfo","isloggedin","burnerid","inputtype","checked","isAuth","employeeID","mailID","phone","userName","room","companyName","usertype","lastseen","arr","split","find","undefined","fnLoginResult","OPLoader","src","require","alt","OPButton","handleButtonClick","target"],"sourceRoot":""}